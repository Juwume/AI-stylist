from fastapi import APIRouter, HTTPException
import requests
import uuid

from app.models.conversation import *
from app.llm.memory import chat_memory


router = APIRouter()


@router.post("/conversations")
async def conversation(
    request: ConversationRequest,
) -> ConversationResponse:
    """
    Handles the initiation or continuation of a conversation session.
    It either starts a new conversation by generating a new session ID or continues an existing conversation
    using the provided session ID.

    Args:
        request (ConversationRequest): The request object containing the conversation ID and the message.
            - conversation_id (Optional[str]): The ID of the existing conversation. If None, a new conversation ID will be generated.
            - message (str): The message to be processed in the conversation.

    Returns:
        ConversationResponse: The response object containing the conversation ID and the generated response text.
            - conversation_id (str): The ID of the conversation.
            - response_text (str): The response text generated by the conversation logic.

    Example:
        Request:
            {
                "conversation_id": null,
                "message": "Hello, how are you?"
            }

        Response:
            {
                "conversation_id": "123e4567-e89b-12d3-a456-426614174000",
                "response_text": "I'm doing well, thank you! How can I assist you today?"
            }

    """
    # Start a new conversation
    if request.conversation_id is None:
        conversation_id = str(uuid.uuid4())
    else:
        conversation_id = request.conversation_id

    # Fetch the image if the URL is provided
    if request.image_url:
        response = requests.get(request.image_url)
        if response.status_code == 200:
            image_data = response.content
        else:
            raise HTTPException(status_code=400, detail="Invalid image URL")
    else:
        image_data = None

    res = chat_memory.invoke(conversation_id, request.message, image_data=image_data)

    return ConversationResponse(conversation_id=str(conversation_id), response_text=res)
