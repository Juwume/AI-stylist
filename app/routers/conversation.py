from fastapi import APIRouter, HTTPException
from fastapi.responses import JSONResponse
import requests
import uuid
import logging

from app.models.conversation import *
from app.llm.memory import chat_memory


router = APIRouter()


@router.post("/conversations", status_code=201)
async def conversation(
    request: ConversationRequest,
) -> JSONResponse:
    """
    Handle the initiation or continuation of a conversation with the AI stylist.

    This endpoint processes a conversation request, optionally fetching an image from a provided URL,
    and interacts with the language model to generate a response.

    Args:
        request (ConversationRequest): The request object containing conversation details.
            - conversation_id (str, optional): The unique identifier for the conversation. If not provided, a new UUID is generated.
            - message (str): The user's message to be processed by the language model.
            - image_url (str, optional): URL of an image to be fetched and included in the conversation context.

    Returns:
        JSONResponse: A response object containing the following fields:
            - conversation_id (str): The unique identifier for the conversation.
            - response_text (str): The response generated by the language model.

    Raises:
        HTTPException: If there is an error fetching the image or processing the conversation, appropriate HTTP error responses are returned:
            - 400: If the provided image URL is invalid.
            - 500: If there is an internal server error while processing the conversation.
    """
    logging.info("CONVERSATION API INPUT: {}".format(request))
    # Start a new conversation
    if request.conversation_id is None:
        conversation_id = str(uuid.uuid4())
    else:
        conversation_id = request.conversation_id

    # Fetch the image if the URL is provided
    image_data = None
    if request.image_url:
        try:
            response = requests.get(request.image_url)
            image_data = response.content
        except Exception as err:
            logging.exception("IMAGE GET ERROR: {}".format(str(err)))
            raise HTTPException(status_code=400, detail=str(err))

    # Pass query to the LLM
    res = chat_memory.invoke(conversation_id, request.message, image_data=image_data)

    return ConversationResponse(conversation_id=str(conversation_id), response_text=res)
